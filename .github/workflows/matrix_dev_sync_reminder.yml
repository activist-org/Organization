name: matrix_dev_sync_reminder
on:
  schedule:
    - cron: "0 14 * * 3" # Wednesdays at 14:00 UTC
  workflow_dispatch: # manual triggering

env:
  FIRST_RUN_DATE: "2024-11-13"

jobs:
  check-repository:
    runs-on: ubuntu-latest
    outputs:
      is_correct_repo: ${{ steps.check.outputs.is_correct_repo }}
    steps:
      - name: Check repository
        id: check
        run: |
          if [ "$GITHUB_REPOSITORY" = "activist-org/Organization" ]; then
            echo "is_correct_repo=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_correct_repo=false" >> "$GITHUB_OUTPUT"
            echo "::warning::This workflow should only run in activist-org/Organization repository."
          fi

  weekindex:
    needs: check-repository
    if: needs.check-repository.outputs.is_correct_repo == 'true'
    runs-on: ubuntu-latest
    outputs:
      weekindex: ${{ steps.calculate.outputs.weekindex }}
      next_bi_weekly_date: ${{ steps.calculate.outputs.next_bi_weekly_date }}
      next_next_bi_weekly_date: ${{ steps.calculate.outputs.next_next_bi_weekly_date }}

    steps:
      - name: Calculate Next Date
        id: calculate
        run: |
          current_date=$(date +%Y-%m-%d)
          start=$(date -d "${{ env.FIRST_RUN_DATE }}" +%s)
          end=$(date -d "$current_date" +%s)
          weekdiff=$(((end - start) / 60 / 60 / 24 / 7))
          weekindex=$((weekdiff % 2))
          # Calculate next bi-weekly date.
          if [ "$weekindex" -eq 0 ]; then
            next_bi_weekly_date=$(date -d "$current_date + 3 days" +%Y-%m-%d)
            next_next_bi_weekly_date=$(date -d "$current_date + 17 days" +%Y-%m-%d)
          else
            next_bi_weekly_date=$(date -d "$current_date + 10 days" +%Y-%m-%d)
            next_next_bi_weekly_date=$(date -d "$current_date + 24 days" +%Y-%m-%d)
          fi
          echo "weekindex=$weekindex" >> "$GITHUB_OUTPUT"
          echo "next_bi_weekly_date=$next_bi_weekly_date" >> "$GITHUB_OUTPUT"
          echo "next_next_bi_weekly_date=$next_next_bi_weekly_date" >> "$GITHUB_OUTPUT"
          echo "FIRST_RUN_DATE: ${{ env.FIRST_RUN_DATE }}" >> $GITHUB_STEP_SUMMARY
          echo "current_date: $current_date" >> $GITHUB_STEP_SUMMARY
          echo "weekdiff: $weekdiff" >> $GITHUB_STEP_SUMMARY
          echo "weekindex: $weekindex" >> $GITHUB_STEP_SUMMARY
          echo "next_bi_weekly_date: $next_bi_weekly_date" >> $GITHUB_STEP_SUMMARY
          if [ "$weekindex" -eq 0 ]; then
            echo "üü¢ It's the first week of the bi-weekly cycle. The action will run." >> $GITHUB_STEP_SUMMARY
          else
            echo "üî¥ It's the second week of the bi-weekly cycle. The action will be skipped." >> $GITHUB_STEP_SUMMARY
          fi
  send-message:
    if: ${{ needs.weekindex.outputs.weekindex == '0' }}
    runs-on: ubuntu-latest
    needs:
      - weekindex
      - check-repository
    steps:
      - name: Format EPOCH Time
        id: epoch-time
        run: |
          current_epoch_time=$(date +%s)
          next_epoch_time=$(date -d "${{ needs.weekindex.outputs.next_bi_weekly_date }} 16:00:00" +%s)
          next_next_epoch_time=$(date -d "${{ needs.weekindex.outputs.next_next_bi_weekly_date }} 16:00:00" +%s)
          echo "EPOCH_TIME=$current_epoch_time" >> $GITHUB_ENV
          echo "NEXT_BI_WEEKLY_DATE=${{ needs.weekindex.outputs.next_bi_weekly_date }}" >> $GITHUB_ENV
          echo "NEXT_EPOCH_TIME=$next_epoch_time" >> $GITHUB_ENV
          echo "NEXT_NEXT_BI_WEEKLY_DATE=${{ needs.weekindex.outputs.next_next_bi_weekly_date }}" >> $GITHUB_ENV
          echo "NEXT_NEXT_EPOCH_TIME=$next_next_epoch_time" >> $GITHUB_ENV
          echo "Current EPOCH time: $current_epoch_time" >> $GITHUB_STEP_SUMMARY
          echo "Next bi-weekly date: ${{ needs.weekindex.outputs.next_bi_weekly_date }}" >> $GITHUB_STEP_SUMMARY
          echo "Next EPOCH time (for sync): $next_epoch_time" >> $GITHUB_STEP_SUMMARY
          echo "Next next bi-weekly date: ${{ needs.weekindex.outputs.next_next_bi_weekly_date }}" >> $GITHUB_STEP_SUMMARY
          echo "Next next EPOCH time (for sync): $next_next_epoch_time" >> $GITHUB_STEP_SUMMARY

      - name: Check if Code Night should be announced
        id: code-night-check
        run: |
          # Extract the month from the upcoming Saturday (next_bi_weekly_date).
          current_saturday_month=$(date -d "${{ needs.weekindex.outputs.next_bi_weekly_date }}" +%m)

          # Remove leading zero for comparison.
          current_saturday_month=$((10#$current_saturday_month))

          # Extract the month from the following Saturday (next_next_bi_weekly_date).
          following_saturday_month=$(date -d "${{ needs.weekindex.outputs.next_next_bi_weekly_date }}" +%m)
          following_saturday_month=$((10#$following_saturday_month))

          # Define code-night months (January, March, May, July, September, November).
          code_night_months=(1 3 5 7 9 11)

          is_code_night_month=false
          for month in "${code_night_months[@]}"; do
            if [ "$current_saturday_month" -eq "$month" ]; then
              is_code_night_month=true
              break
            fi
          done

          # Calculate which sync this is within the current month.
          current_saturday_date=$(date -d "${{ needs.weekindex.outputs.next_bi_weekly_date }}" +%d)
          current_saturday_date=$((10#$current_saturday_date))
          sync_number_in_month=$(((current_saturday_date - 1) / 14 + 1))

          # Check if this is the last Saturday of a code-night month.
          # Upcoming Saturday is in code-night month AND following Saturday is in different month.
          if [ "$is_code_night_month" = true ] && [ "$current_saturday_month" -ne "$following_saturday_month" ]; then
            echo "IS_CODE_NIGHT_SYNC=true" >> $GITHUB_ENV
            echo "üåô This is the last dev sync of a code-night month - Code Night will be announced!"
            echo "üåô This is the last dev sync of a code-night month - Code Night will be announced!" >> $GITHUB_STEP_SUMMARY
          elif [ "$is_code_night_month" = true ]; then
            echo "IS_CODE_NIGHT_SYNC=false" >> $GITHUB_ENV
            echo "üîç DEBUG: This is a special code-night month (month $current_saturday_month) and this is sync #$sync_number_in_month, but NOT the last sync of this month - Code Night message will NOT show"
            echo "üîç DEBUG: This is a special code-night month (month $current_saturday_month) and this is sync #$sync_number_in_month, but NOT the last sync of this month - Code Night message will NOT show" >> $GITHUB_STEP_SUMMARY
          else
            echo "IS_CODE_NIGHT_SYNC=false" >> $GITHUB_ENV
            echo "üìÖ Regular dev sync - no Code Night announcement needed (not a code-night month)"
            echo "üìÖ Regular dev sync - no Code Night announcement needed (not a code-night month)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "Current Saturday month: $current_saturday_month" >> $GITHUB_STEP_SUMMARY
          echo "Following Saturday month: $following_saturday_month" >> $GITHUB_STEP_SUMMARY
          echo "Is code-night month: $is_code_night_month" >> $GITHUB_STEP_SUMMARY
          echo "Sync number in month: $sync_number_in_month" >> $GITHUB_STEP_SUMMARY

      - name: Etherpad Creation
        env:
          NEXT_BI_WEEKLY_DATE: ${{ env.NEXT_BI_WEEKLY_DATE }}
          NEXT_EPOCH_TIME: ${{ env.NEXT_EPOCH_TIME }}
          NEXT_NEXT_BI_WEEKLY_DATE: ${{ env.NEXT_NEXT_BI_WEEKLY_DATE }}
          NEXT_NEXT_EPOCH_TIME: ${{ env.NEXT_NEXT_EPOCH_TIME }}
        run: |
          pip install requests
          python - <<EOF
          import requests
          import os

          next_epoch_time = os.environ.get('NEXT_EPOCH_TIME')
          next_bi_weekly_date = os.environ.get('NEXT_BI_WEEKLY_DATE')
          next_next_epoch_time = os.environ.get('NEXT_NEXT_EPOCH_TIME')
          next_next_bi_weekly_date = os.environ.get('NEXT_NEXT_BI_WEEKLY_DATE')
          pad_name = f'activist-dev-sync-{next_bi_weekly_date}'
          url = f'https://etherpad.wikimedia.org/p/{pad_name}/import'
          print(f"Importing content to: https://etherpad.wikimedia.org/p/{pad_name}")

          # The text you want to add to the pad.
          content = f"""<html><body>
          <h1><strong>activist dev sync {next_bi_weekly_date}</strong></h1>
          <br>
          <br>
          <p>Pad directory:  https://etherpad.wikimedia.org/p/activist-dev-sync</a><br>
          ZoneStamp:  https://zonestamp.toolforge.org/{next_epoch_time}</a></p>
          <br>

          <h2>Participants (please list yourself if you'd like to)</h2>
          <ul>
            <li>Participant</li>
          </ul>
          <br>

          <h2>Topics</h2>
          <ul>
            <li>All: Introductions üëã</li>
            <li>All: Does anyone want a calendar invite to the dev sync?
                <ul>
                    <li>If you would like an invite, please message the team on Matrix/Element</li>
                </ul>
              </li>
            <li>Recap done by: NAME</li>
            <li>Go through the project board: https://github.com/orgs/activist-org/projects/1</a></li>
            <li>Name:</li>
          </ul>
          <br>

          <h2>Tasks (strikethrough ^/‚åò + 5 to mark as complete)</h2>
          <ul>
            <li>Task</li>
          </ul>
          <br>

          <h2><strong>Recap</strong></h2>
          <br>
          <br>
          <p>Here's the recap for today/yesterday/Saturday's dev sync üßë‚Äçüíª‚ôªÔ∏è</p>
          <br>
          <p>
            - [Pad for the sync](https://etherpad.wikimedia.org/p/activist-dev-sync-${{ env.NEXT_BI_WEEKLY_DATE }})
            <br>
            - Note
          </p>
          <br>
          <p>The next dev sync will be [Saturday {next_next_bi_weekly_date} at 16:00 UTC](https://zonestamp.toolforge.org/${{ env.NEXT_NEXT_EPOCH_TIME }}).</p>
          <br>
          <p>Nice outro üòä</p>

          </body></html>"""

          # Prepare the file to upload.
          files = {
              'file': ('import.html', content.encode('utf-8'), 'text/html'),
          }

          response = requests.post(url, files=files)

          if response.status_code in [200, 302]:
              print(f"Content imported successfully into pad '{pad_name}'.")
          elif response.status_code == 413:
              print("The file is too large to upload.")
          else:
              print(f"Failed to import content. Status code: {response.status_code}")
              print(response.text)
          EOF
      - name: Send Message to Matrix Channel
        id: matrix-chat-message
        uses: fadenb/matrix-chat-message@v0.0.6
        with:
          homeserver: "matrix.org"
          token: ${{ secrets.MATRIX_ACTIVIST_BOT_ACCESS_TOKEN }}
          channel: ${{ secrets.MATRIX_DEVELOPMENT_ROOM_ID }}
          message: |
            Hello all! ü§ñüëã Here's the reminder for [this Saturday's dev sync at 16:00 UTC](https://zonestamp.toolforge.org/${{ env.NEXT_EPOCH_TIME }}) üßë‚Äçüíª‚ôªÔ∏è

            For those new to the community, every two Saturdays the activist team does a call to discuss the project. We use [Element Call](https://call.element.io/) and a [pad from Wikimedia's Etherpad instance](https://etherpad.wikimedia.org/p/activist-dev-sync-${{ env.NEXT_BI_WEEKLY_DATE }}) for taking notes. Note that Element Call doesn't have a chat, so questions need to be written in the pad :)

            Details for the upcoming sync:

            - Call link: https://call.element.io/room/#/activist-dev-sync?roomId=!UddhHUSXxHAoAnImXb:call.ems.host&password=ASriEQCG4DE6Q1QSB313zig0bhLd62RN
            - This week's pad: https://etherpad.wikimedia.org/p/activist-dev-sync-${{ env.NEXT_BI_WEEKLY_DATE }}
            - All activist pads: https://etherpad.wikimedia.org/p/activist-dev-sync

            Please reply in the thread for this message with anything you'd like to discuss üßµ${{ env.IS_CODE_NIGHT_SYNC == 'true' && '

            **Also note**: This dev sync is Code Night! üåô The community will stay in the call after the sync to work on projects together, pair program and hang out :) All skill levels are welcome!' || '' }}

            Thanks and have a great day! ‚ù§Ô∏è
